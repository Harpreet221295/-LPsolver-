# -LPsolver-
# i have done  my part now as decided 





class LPsolver:
    def solve(self, a, b, c):
        maximum_position, minimum_position, C, B, x = [], [], [], [], []
        for i in c:
            C += [[j for j in i]]
        x= [0 for j in range(len(a))]    
        for i in range(len(b)):
            C[i] += [0 for i in range(len(b))]
            C[i][len(a)+i] = 1
        a += [0 for i in range(len(b))]
        B = [0 for i in range(len(b))]
        while True:
            maximum_position, minimum_position = [], []
            for i in range(len(a)):
                summation = 0
                for j in range(len(b)):
                    summation += C[j][i]*B[j]
                maximum_position += [a[i]-summation]
            flag = 0
            for i in maximum_position:
                if i <= 0:
                     flag += 1
            if flag == len(a):
                 break
            index_frst = maximum_position.index(max(maximum_position))    
            for i in range(len(b)):
                if C[i][index_frst] != 0:
                     minimum_position += [b[i]/C[i][index_frst]]
                elif b[i] > 0:
                    minimum_position += ["infinity"]
                else:
                    minimum_position += ["-infinity"]
            flag = 0
            for i in minimum_position:
                if i != "infinity":
                    if i == "-infinity":
                        flag += 1
                    elif i <= 0:
                        flag += 1
            if flag == len(b):
                return "unbounded problem"
